// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model RevokedToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
}

// Modelo del Usuario
model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  password        String
  name            String
  surname         String
  dateOfBirth     DateTime
  phoneNumber     String?
  address         String?
  profilePicture  String?
  trips           TripUser[]  // Relación con el modelo de unión
  favoriteTrips   String[]    // Lista de IDs de viajes favoritos
  tripsCreated    String[]    // Lista de IDs de viajes creados
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model GeneratedText {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  prompt  String
  result  String
  createdAt DateTime @default(now())
}

// Modelo del Viaje
model Trip {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  origin              String
  destination         String
  startDate           DateTime
  endDate             DateTime
  duration            Int
  budget              Float
  status              String           @default("planned") // Ej: planned, booked, completed
  notes               String?
  users               TripUser[]       // Relación con el modelo de unión
  accommodations      TripAccommodation[] // Relación con el modelo de unión
  itineraries         TripItinerary[]  // Relación con el modelo de unión
  pointsOfInterest    TripPointOfInterest[]  // Relación con el modelo de unión
  activities          TripActivity[]   // Relación con el modelo de unión
  flights             TripFlight[]     // Relación con el modelo de vuelos
  itineraryDetails    Itinerary[]      // Relación con el modelo de Itinerary
  restaurants         TripRestaurant[] // Relación con el modelo de restaurantes
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

// Modelo del Alojamiento
model Accommodation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  address       String
  price         Float
  rating        Float?
  amenities     String[]
  description   String?
  images        String[]
  coordinates   String?  // Coordenadas del alojamiento
  city          String   // Ciudad del alojamiento
  tripRelations TripAccommodation[]  // Relación con el modelo de unión
  itinerary     ItineraryAccommodation[]  // Relación con ItineraryAccommodation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Modelo del Itinerario
model Itinerary {
  id                   String                      @id @default(auto()) @map("_id") @db.ObjectId
  day                  Int
  date                 DateTime
  tripId               String                      @db.ObjectId
  trip                 Trip                        @relation(fields: [tripId], references: [id])
  accommodations       ItineraryAccommodation[]    // Relación con ItineraryAccommodation
  activities           ItineraryActivity[]         // Relación con ItineraryActivity
  pointsOfInterest     ItineraryPointOfInterest[]  // Relación con ItineraryPointOfInterest
  tripRelations        TripItinerary[]             @relation("TripItineraryItinerary") // Relación con TripItinerary
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
}

// Modelo del Punto de Interés
model PointOfInterest {
  id                   String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String                      @unique
  description          String
  type                 String                      // Ejemplo: "activity", "transport", "restaurant"
  address              String?
  coordinates          String?                     // Coordenadas GPS
  imageUrl             String?
  openingHours         String?                     // Horarios de apertura
  ticketPrice          Float?                      // Precio de la entrada, si aplica
  city                 String                      // Ciudad del punto de interés
  activities           PointOfInterestActivity[]   // Relación con PointOfInterestActivity
  tripRelations        TripPointOfInterest[]       // Relación con TripPointOfInterest
  itineraryRelations   ItineraryPointOfInterest[]  // Relación con ItineraryPointOfInterest
  images               String[]                    // Imágenes del punto de interés
  activityRelations    Activity[]                  @relation("PointOfInterestActivities")
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
}

// Modelo de Actividad
model Activity {
  id                        String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                      String                      @unique
  description               String
  duration                  Int                         // Duración en minutos
  cost                      Float?                      // Costo de la actividad
  pointOfInterestId         String?                     @db.ObjectId
  pointOfInterest           PointOfInterest?            @relation(fields: [pointOfInterestId], references: [id], name: "PointOfInterestActivities")
  trips                     TripActivity[]              // Relación con TripActivity
  itineraries               ItineraryActivity[]         // Relación con ItineraryActivity
  pointOfInterestActivities PointOfInterestActivity[]   // Relación con PointOfInterestActivity
  images                    String[]                    // Imágenes de la actividad
  coordinates               String?                     // Coordenadas de la actividad
  city                      String                      // Ciudad de la actividad
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
}

// Modelo del Restaurante
model Restaurant {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      @unique
  address         String
  cuisine         String
  priceRange      String
  rating          Float?
  description     String?
  images          String[]
  coordinates     String?
  city            String      // Ciudad del restaurante
  tripRelations   TripRestaurant[]  // Relación con TripRestaurant
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Modelo del Vuelo
model Flight {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  airline         String
  flightNumber    String
  departureTime   DateTime
  arrivalTime     DateTime
  price           Float
  tripRelations   TripFlight[]   // Relación con TripFlight
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Modelos de Unión para Relaciones Muchos-a-Muchos

model TripUser {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  tripId   String @db.ObjectId
  userId   String @db.ObjectId
  trip     Trip   @relation(fields: [tripId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  @@unique([tripId, userId])
}

model TripActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId    String   @db.ObjectId
  activityId String  @db.ObjectId
  trip      Trip     @relation(fields: [tripId], references: [id])
  activity  Activity @relation(fields: [activityId], references: [id])
  @@unique([tripId, activityId])
}

model TripAccommodation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId         String   @db.ObjectId
  accommodationId String  @db.ObjectId
  trip           Trip     @relation(fields: [tripId], references: [id])
  accommodation  Accommodation @relation(fields: [accommodationId], references: [id])
  @@unique([tripId, accommodationId])
}

model TripItinerary {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId      String   @db.ObjectId
  itineraryId String   @db.ObjectId
  trip        Trip     @relation(fields: [tripId], references: [id])
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], name: "TripItineraryItinerary")
  @@unique([tripId, itineraryId])
}

model TripPointOfInterest {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  tripId            String           @db.ObjectId
  pointOfInterestId String           @db.ObjectId
  trip              Trip             @relation(fields: [tripId], references: [id])
  pointOfInterest   PointOfInterest  @relation(fields: [pointOfInterestId], references: [id])
  @@unique([tripId, pointOfInterestId])
}

model TripFlight {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId         String   @db.ObjectId
  flightId       String   @db.ObjectId
  trip           Trip     @relation(fields: [tripId], references: [id])
  flight         Flight   @relation(fields: [flightId], references: [id])
  @@unique([tripId, flightId])
}

model TripRestaurant {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  tripId         String     @db.ObjectId
  restaurantId   String     @db.ObjectId
  trip           Trip       @relation(fields: [tripId], references: [id])
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
  @@unique([tripId, restaurantId])
}

model ItineraryActivity {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  itineraryId   String       @db.ObjectId
  activityId    String       @db.ObjectId
  itinerary     Itinerary    @relation(fields: [itineraryId], references: [id])
  activity      Activity     @relation(fields: [activityId], references: [id])
  startTime     DateTime
  endTime       DateTime
  location      String
  @@unique([itineraryId, activityId])
}

model ItineraryPointOfInterest {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  itineraryId       String           @db.ObjectId
  pointOfInterestId String           @db.ObjectId
  itinerary         Itinerary        @relation(fields: [itineraryId], references: [id])
  pointOfInterest   PointOfInterest  @relation(fields: [pointOfInterestId], references: [id])
  startTime         DateTime
  endTime           DateTime
  transportation    String
  @@unique([itineraryId, pointOfInterestId])
}

model ItineraryAccommodation {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  itineraryId       String           @db.ObjectId
  accommodationId   String           @db.ObjectId
  itinerary         Itinerary        @relation(fields: [itineraryId], references: [id])
  accommodation     Accommodation    @relation(fields: [accommodationId], references: [id])
  checkInTime       DateTime
  checkOutTime      DateTime
  @@unique([itineraryId, accommodationId])
}

model PointOfInterestActivity {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  pointOfInterestId String           @db.ObjectId
  activityId        String           @db.ObjectId
  pointOfInterest   PointOfInterest  @relation(fields: [pointOfInterestId], references: [id])
  activity          Activity         @relation(fields: [activityId], references: [id])
  @@unique([pointOfInterestId, activityId])
}
